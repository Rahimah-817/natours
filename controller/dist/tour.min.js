"use strict";function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var r=[],a=!0,n=!1,s=void 0;try{for(var o,u=e[Symbol.iterator]();!(a=(o=u.next()).done)&&(r.push(o.value),!t||r.length!==t);a=!0);}catch(e){n=!0,s=e}finally{try{a||null==u.return||u.return()}finally{if(n)throw s}}return r}}function _arrayWithHoles(e){if(Array.isArray(e))return e}var Tour=require("../model/tourSchema"),AppError=require("../utils/appError"),catchAsync=require("../utils/catchAsync"),factory=require("./handlerFactory"),aliesTopTours=function(t,e,r){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:t.query.limit="6",t.query.sort="ratingsAverage,price",t.query.fields="name,price,ratingsAverage,summary,difficulty",r();case 4:case"end":return e.stop()}})},getAllTours=factory.getAll(Tour),getTour=factory.getOne(Tour,{path:"review"}),createTour=factory.createOne(Tour),updateTour=factory.updateOne(Tour),deleteTour=factory.deleteOne(Tour),getTourState=catchAsync(function(e,t){var r;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(Tour.aggregate([{$match:{ratingsAverage:{$gte:4.5}}},{$group:{_id:{$toUpper:"$difficulty"},numTours:{$sum:1},numRatings:{$sum:"$ratingsQuantity"},avgRating:{$avg:"$ratingsAverage"},avgPrice:{$avg:"$price"},minPrice:{$min:"$price"},maxPrice:{$max:"$price"}}},{$sort:{avgPrice:1}},{$match:{_id:{$ne:"EASY"}}}]));case 2:r=e.sent,t.status(200).json({status:"success",data:{stats:r}});case 4:case"end":return e.stop()}})}),getMonthlyPlan=catchAsync(function(t,r){var a,n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return a=1*t.params.year,e.next=3,regeneratorRuntime.awrap(Tour.aggregate([{$unwind:"$startDates"},{$match:{startDates:{$gte:new Date("".concat(a,"-01-01")),$lte:new Date("".concat(a,"-12-31"))}}},{$group:{_id:{$month:"$startDates"},numTourStarts:{$sum:1},tour:{$push:"$name"}}},{$addFields:{month:"$_id"}},{$project:{_id:0}},{$sort:{numTourStarts:-1}},{$limit:12}]));case 3:n=e.sent,r.status(200).json({status:"success",index:n.length,data:{plan:n}});case 5:case"end":return e.stop()}})}),getToursWithin=catchAsync(function(t,r,a){var n,s,o,u,i,c,l,g,p,d;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.params,s=n.distance,o=n.latlng,u=n.unit,i=o.split(","),c=_slicedToArray(i,2),l=c[0],g=c[1],p="mi"===u?s/3963.2:s/6378.1,l&&g){e.next=5;break}return e.abrupt("return",a(new AppError("Please provide latitude and longitude in the format lat, lng.",400)));case 5:return e.next=7,regeneratorRuntime.awrap(Tour.find({startLocation:{$geoWithin:{$centerSphere:[[g,l],p]}}}));case 7:d=e.sent,r.status(200).json({status:"success",results:d.length,data:{data:d}});case 9:case"end":return e.stop()}})}),getDistances=catchAsync(function(t,r,a){var n,s,o,u,i,c,l,g,p;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.params,s=n.latlng,o=n.unit,u=s.split(","),i=_slicedToArray(u,2),c=i[0],l=i[1],g="mi"===o?621371e-9:.001,c&&l||a(new AppError("Please provide latitutr and longitude in the format lat,lng.",400)),e.next=6,regeneratorRuntime.awrap(Tour.aggregate([{$geoNear:{near:{type:"Point",coordinates:[1*l,1*c]},distanceField:"distance",distanceMultiplier:g}},{$project:{distance:1,name:1}}]));case 6:p=e.sent,r.status(200).json({status:"success",data:{data:p}});case 8:case"end":return e.stop()}})});module.exports={createTour:createTour,getAllTours:getAllTours,getTour:getTour,updateTour:updateTour,deleteTour:deleteTour,aliesTopTours:aliesTopTours,getTourState:getTourState,getMonthlyPlan:getMonthlyPlan,getToursWithin:getToursWithin,getDistances:getDistances};
//# sourceMappingURL=tour.min.js.map
