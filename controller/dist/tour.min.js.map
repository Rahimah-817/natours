{"version":3,"sources":["tour.js"],"names":["Tour","require","AppError","catchAsync","factory","aliesTopTours","req","res","next","regeneratorRuntime","async","_context","prev","query","limit","sort","fields","stop","getAll","getTour","getOne","path","createOne","updateTour","updateOne","deleteOne","aggregate","$match","ratingsAverage","$gte","$sum","numRatings","avgRating","$avg","avgPrice","minPrice","$min","maxPrice","$max","$sort","_id","$ne","stats","deleteTour","getTourState","getMonthlyPlan","year","plan","_context3","params","awrap","startDates","$group","Date","$addFields","month","$project","numTourStarts","$limit","sent","status","index","length","data","_req$params","distance","latlng","unit","_latlng$split","_latlng$split2","lat","lng","radius","tours","_context4","_slicedToArray","abrupt","find","startLocation","$geoWithin","$centerSphere","results","$unwind","getDistances","_req$params2","_latlng$split3","_latlng$split4","multiplier","distances","_context5","split","tour","$geoNear","near","distanceField","name","json","module","exports","createTour","getAllTours","getToursWithin"],"mappings":"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","file":"tour.min.js","sourcesContent":["const Tour = require(\"../model/tourSchema\");\r\nconst AppError = require(\"../utils/appError\");\r\nconst catchAsync = require(\"../utils/catchAsync\");\r\nconst factory = require(\"./handlerFactory\");\r\n\r\nconst aliesTopTours = async (req, res, next) => {\r\n  req.query.limit = \"6\";\r\n  req.query.sort = \"ratingsAverage,price\";\r\n  req.query.fields = \"name,price,ratingsAverage,summary,difficulty\";\r\n  next();\r\n};\r\n\r\nconst getAllTours = factory.getAll(Tour);\r\nconst getTour = factory.getOne(Tour, { path: \"review\" });\r\nconst createTour = factory.createOne(Tour);\r\nconst updateTour = factory.updateOne(Tour);\r\nconst deleteTour = factory.deleteOne(Tour);\r\n\r\nconst getTourState = catchAsync(async (req, res, next) => {\r\n  const stats = await Tour.aggregate([\r\n    {\r\n      $match: { ratingsAverage: { $gte: 4.5 } },\r\n    },\r\n    {\r\n      $group: {\r\n        _id: { $toUpper: \"$difficulty\" },\r\n        numTours: { $sum: 1 },\r\n        numRatings: { $sum: \"$ratingsQuantity\" },\r\n        avgRating: { $avg: \"$ratingsAverage\" },\r\n        avgPrice: { $avg: \"$price\" },\r\n        minPrice: { $min: \"$price\" },\r\n        maxPrice: { $max: \"$price\" },\r\n      },\r\n    },\r\n    {\r\n      $sort: { avgPrice: 1 },\r\n    },\r\n    {\r\n      $match: { _id: { $ne: \"EASY\" } }, // Use string representation of _id field\r\n    },\r\n  ]);\r\n  res.status(200).json({\r\n    status: \"success\",\r\n    data: {\r\n      stats,\r\n    },\r\n  });\r\n});\r\n\r\nconst getMonthlyPlan = catchAsync(async (req, res, next) => {\r\n  const year = req.params.year * 1;\r\n\r\n  const plan = await Tour.aggregate([\r\n    { $unwind: \"$startDates\" },\r\n    {\r\n      $match: {\r\n        startDates: {\r\n          $gte: new Date(`${year}-01-01`),\r\n          $lte: new Date(`${year}-12-31`),\r\n        },\r\n      },\r\n    },\r\n    {\r\n      $group: {\r\n        _id: {\r\n          $month: \"$startDates\",\r\n        },\r\n        numTourStarts: { $sum: 1 },\r\n        tour: { $push: \"$name\" },\r\n      },\r\n    },\r\n    {\r\n      $addFields: { month: \"$_id\" },\r\n    },\r\n    {\r\n      $project: {\r\n        _id: 0,\r\n      },\r\n    },\r\n    {\r\n      $sort: { numTourStarts: -1 },\r\n    },\r\n    {\r\n      $limit: 12,\r\n    },\r\n  ]);\r\n\r\n  res.status(200).json({\r\n    status: \"success\",\r\n    index: plan.length,\r\n    data: {\r\n      plan,\r\n    },\r\n  });\r\n});\r\n\r\nconst getToursWithin = catchAsync(async (req, res, next) => {\r\n  const { distance, latlng, unit } = req.params;\r\n  const [lat, lng] = latlng.split(\",\");\r\n\r\n  const radius = unit === \"mi\" ? distance / 3963.2 : distance / 6378.1;\r\n\r\n  if (!lat || !lng) {\r\n    return next(\r\n      new AppError(\r\n        \"Please provide latitude and longitude in the format lat, lng.\",\r\n        400,\r\n      ),\r\n    ); // Added return statement to stop execution\r\n  }\r\n\r\n  const tours = await Tour.find({\r\n    startLocation: { $geoWithin: { $centerSphere: [[lng, lat], radius] } }, // Make sure to reverse lat and lng\r\n  });\r\n\r\n  res.status(200).json({\r\n    status: \"success\",\r\n    results: tours.length,\r\n    data: {\r\n      data: tours,\r\n    },\r\n  });\r\n});\r\n\r\nconst getDistances = catchAsync(async (req, res, next) => {\r\n  const { latlng, unit } = req.params;\r\n  const [lat, lng] = latlng.split(\",\");\r\n\r\n  const multiplier = unit === \"mi\" ? 0.000621371 : 0.001;\r\n\r\n  if (!lat || !lng) {\r\n    next(\r\n      new AppError(\r\n        \"Please provide latitutr and longitude in the format lat,lng.\",\r\n        400,\r\n      ),\r\n    );\r\n  }\r\n\r\n  const distances = await Tour.aggregate([\r\n    {\r\n      $geoNear: {\r\n        near: {\r\n          type: \"Point\",\r\n          coordinates: [lng * 1, lat * 1],\r\n        },\r\n        distanceField: \"distance\",\r\n        distanceMultiplier: multiplier,\r\n      },\r\n    },\r\n    {\r\n      $project: {\r\n        distance: 1,\r\n        name: 1,\r\n      },\r\n    },\r\n  ]);\r\n\r\n  res.status(200).json({\r\n    status: \"success\",\r\n    data: {\r\n      data: distances,\r\n    },\r\n  });\r\n});\r\n\r\nmodule.exports = {\r\n  createTour,\r\n  getAllTours,\r\n  getTour,\r\n  updateTour,\r\n  deleteTour,\r\n  aliesTopTours,\r\n  getTourState,\r\n  getMonthlyPlan,\r\n  getToursWithin,\r\n  getDistances,\r\n};\r\n"]}