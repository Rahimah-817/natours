{"version":3,"sources":["tour.js"],"names":["Tour","require","AppError","catchAsync","factory","aliesTopTours","req","res","next","query","limit","sort","fields","getAllTours","getAll","getTour","getOne","path","createTour","createOne","updateTour","updateOne","deleteTour","deleteOne","getTourState","aggregate","$match","ratingsAverage","$gte","$group","_id","$toUpper","numTours","$sum","numRatings","avgRating","$avg","avgPrice","minPrice","$min","maxPrice","$max","$sort","$ne","stats","status","json","data","getMonthlyPlan","year","params","$unwind","startDates","Date","$lte","$month","numTourStarts","tour","$push","$addFields","month","$project","$limit","plan","index","length","getToursWithin","distance","latlng","unit","split","lat","lng","radius","find","startLocation","$geoWithin","$centerSphere","tours","results","getDistances","multiplier","$geoNear","near","type","coordinates","distanceField","distanceMultiplier","name","distances","module","exports"],"mappings":";;;;;;;;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAxB;;AACA,IAAME,UAAU,GAAGF,OAAO,CAAC,qBAAD,CAA1B;;AACA,IAAMG,OAAO,GAAGH,OAAO,CAAC,kBAAD,CAAvB;;AAEA,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AACpBF,UAAAA,GAAG,CAACG,KAAJ,CAAUC,KAAV,GAAkB,GAAlB;AACAJ,UAAAA,GAAG,CAACG,KAAJ,CAAUE,IAAV,GAAiB,sBAAjB;AACAL,UAAAA,GAAG,CAACG,KAAJ,CAAUG,MAAV,GAAmB,8CAAnB;AACAJ,UAAAA,IAAI;;AAJgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;;AAOA,IAAMK,WAAW,GAAGT,OAAO,CAACU,MAAR,CAAed,IAAf,CAApB;AACA,IAAMe,OAAO,GAAGX,OAAO,CAACY,MAAR,CAAehB,IAAf,EAAqB;AAAEiB,EAAAA,IAAI,EAAE;AAAR,CAArB,CAAhB;AACA,IAAMC,UAAU,GAAGd,OAAO,CAACe,SAAR,CAAkBnB,IAAlB,CAAnB;AACA,IAAMoB,UAAU,GAAGhB,OAAO,CAACiB,SAAR,CAAkBrB,IAAlB,CAAnB;AACA,IAAMsB,UAAU,GAAGlB,OAAO,CAACmB,SAAR,CAAkBvB,IAAlB,CAAnB;AAEA,IAAMwB,YAAY,GAAGrB,UAAU,CAAC,iBAAOG,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACVR,IAAI,CAACyB,SAAL,CAAe,CACjC;AACEC,YAAAA,MAAM,EAAE;AAAEC,cAAAA,cAAc,EAAE;AAAEC,gBAAAA,IAAI,EAAE;AAAR;AAAlB;AADV,WADiC,EAIjC;AACEC,YAAAA,MAAM,EAAE;AACNC,cAAAA,GAAG,EAAE;AAAEC,gBAAAA,QAAQ,EAAE;AAAZ,eADC;AAENC,cAAAA,QAAQ,EAAE;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAFJ;AAGNC,cAAAA,UAAU,EAAE;AAAED,gBAAAA,IAAI,EAAE;AAAR,eAHN;AAINE,cAAAA,SAAS,EAAE;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAJL;AAKNC,cAAAA,QAAQ,EAAE;AAAED,gBAAAA,IAAI,EAAE;AAAR,eALJ;AAMNE,cAAAA,QAAQ,EAAE;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eANJ;AAONC,cAAAA,QAAQ,EAAE;AAAEC,gBAAAA,IAAI,EAAE;AAAR;AAPJ;AADV,WAJiC,EAejC;AACEC,YAAAA,KAAK,EAAE;AAAEL,cAAAA,QAAQ,EAAE;AAAZ;AADT,WAfiC,EAkBjC;AACEX,YAAAA,MAAM,EAAE;AAAEI,cAAAA,GAAG,EAAE;AAAEa,gBAAAA,GAAG,EAAE;AAAP;AAAP,aADV,CACoC;;AADpC,WAlBiC,CAAf,CADU;;AAAA;AACxBC,UAAAA,KADwB;AAuB9BrC,UAAAA,GAAG,CAACsC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,SADW;AAEnBE,YAAAA,IAAI,EAAE;AACJH,cAAAA,KAAK,EAALA;AADI;AAFa,WAArB;;AAvB8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAA/B;AA+BA,IAAMI,cAAc,GAAG7C,UAAU,CAAC,kBAAOG,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1ByC,UAAAA,IAD0B,GACnB3C,GAAG,CAAC4C,MAAJ,CAAWD,IAAX,GAAkB,CADC;AAAA;AAAA,0CAGbjD,IAAI,CAACyB,SAAL,CAAe,CAChC;AAAE0B,YAAAA,OAAO,EAAE;AAAX,WADgC,EAEhC;AACEzB,YAAAA,MAAM,EAAE;AACN0B,cAAAA,UAAU,EAAE;AACVxB,gBAAAA,IAAI,EAAE,IAAIyB,IAAJ,WAAYJ,IAAZ,YADI;AAEVK,gBAAAA,IAAI,EAAE,IAAID,IAAJ,WAAYJ,IAAZ;AAFI;AADN;AADV,WAFgC,EAUhC;AACEpB,YAAAA,MAAM,EAAE;AACNC,cAAAA,GAAG,EAAE;AACHyB,gBAAAA,MAAM,EAAE;AADL,eADC;AAINC,cAAAA,aAAa,EAAE;AAAEvB,gBAAAA,IAAI,EAAE;AAAR,eAJT;AAKNwB,cAAAA,IAAI,EAAE;AAAEC,gBAAAA,KAAK,EAAE;AAAT;AALA;AADV,WAVgC,EAmBhC;AACEC,YAAAA,UAAU,EAAE;AAAEC,cAAAA,KAAK,EAAE;AAAT;AADd,WAnBgC,EAsBhC;AACEC,YAAAA,QAAQ,EAAE;AACR/B,cAAAA,GAAG,EAAE;AADG;AADZ,WAtBgC,EA2BhC;AACEY,YAAAA,KAAK,EAAE;AAAEc,cAAAA,aAAa,EAAE,CAAC;AAAlB;AADT,WA3BgC,EA8BhC;AACEM,YAAAA,MAAM,EAAE;AADV,WA9BgC,CAAf,CAHa;;AAAA;AAG1BC,UAAAA,IAH0B;AAsChCxD,UAAAA,GAAG,CAACsC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,SADW;AAEnBmB,YAAAA,KAAK,EAAED,IAAI,CAACE,MAFO;AAGnBlB,YAAAA,IAAI,EAAE;AACJgB,cAAAA,IAAI,EAAJA;AADI;AAHa,WAArB;;AAtCgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAAjC;AA+CA,IAAMG,cAAc,GAAG/D,UAAU,CAAC,kBAAOG,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACGF,GAAG,CAAC4C,MADP,EACxBiB,QADwB,eACxBA,QADwB,EACdC,MADc,eACdA,MADc,EACNC,IADM,eACNA,IADM;AAAA,0BAEbD,MAAM,CAACE,KAAP,CAAa,GAAb,CAFa,qDAEzBC,GAFyB,sBAEpBC,GAFoB;AAI1BC,UAAAA,MAJ0B,GAIjBJ,IAAI,KAAK,IAAT,GAAgBF,QAAQ,GAAG,MAA3B,GAAoCA,QAAQ,GAAG,MAJ9B;;AAAA,gBAM5B,CAACI,GAAD,IAAQ,CAACC,GANmB;AAAA;AAAA;AAAA;;AAAA,4CAOvBhE,IAAI,CACT,IAAIN,QAAJ,CACE,+DADF,EAEE,GAFF,CADS,CAPmB;;AAAA;AAAA;AAAA,0CAeZF,IAAI,CAAC0E,IAAL,CAAU;AAC5BC,YAAAA,aAAa,EAAE;AAAEC,cAAAA,UAAU,EAAE;AAAEC,gBAAAA,aAAa,EAAE,CAAC,CAACL,GAAD,EAAMD,GAAN,CAAD,EAAaE,MAAb;AAAjB;AAAd,aADa,CAC4C;;AAD5C,WAAV,CAfY;;AAAA;AAe1BK,UAAAA,KAf0B;AAmBhCvE,UAAAA,GAAG,CAACsC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,SADW;AAEnBkC,YAAAA,OAAO,EAAED,KAAK,CAACb,MAFI;AAGnBlB,YAAAA,IAAI,EAAE;AACJA,cAAAA,IAAI,EAAE+B;AADF;AAHa,WAArB;;AAnBgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAAjC;AA4BA,IAAME,YAAY,GAAG7E,UAAU,CAAC,kBAAOG,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACLF,GAAG,CAAC4C,MADC,EACtBkB,MADsB,gBACtBA,MADsB,EACdC,IADc,gBACdA,IADc;AAAA,2BAEXD,MAAM,CAACE,KAAP,CAAa,GAAb,CAFW,sDAEvBC,GAFuB,sBAElBC,GAFkB;AAIxBS,UAAAA,UAJwB,GAIXZ,IAAI,KAAK,IAAT,GAAgB,WAAhB,GAA8B,KAJnB;;AAM9B,cAAI,CAACE,GAAD,IAAQ,CAACC,GAAb,EAAkB;AAChBhE,YAAAA,IAAI,CACF,IAAIN,QAAJ,CACE,8DADF,EAEE,GAFF,CADE,CAAJ;AAMD;;AAb6B;AAAA,0CAeNF,IAAI,CAACyB,SAAL,CAAe,CACrC;AACEyD,YAAAA,QAAQ,EAAE;AACRC,cAAAA,IAAI,EAAE;AACJC,gBAAAA,IAAI,EAAE,OADF;AAEJC,gBAAAA,WAAW,EAAE,CAACb,GAAG,GAAG,CAAP,EAAUD,GAAG,GAAG,CAAhB;AAFT,eADE;AAKRe,cAAAA,aAAa,EAAE,UALP;AAMRC,cAAAA,kBAAkB,EAAEN;AANZ;AADZ,WADqC,EAWrC;AACEpB,YAAAA,QAAQ,EAAE;AACRM,cAAAA,QAAQ,EAAE,CADF;AAERqB,cAAAA,IAAI,EAAE;AAFE;AADZ,WAXqC,CAAf,CAfM;;AAAA;AAexBC,UAAAA,SAfwB;AAkC9BlF,UAAAA,GAAG,CAACsC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,YAAAA,MAAM,EAAE,SADW;AAEnBE,YAAAA,IAAI,EAAE;AACJA,cAAAA,IAAI,EAAE0C;AADF;AAFa,WAArB;;AAlC8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAA/B;AA0CAC,MAAM,CAACC,OAAP,GAAiB;AACfzE,EAAAA,UAAU,EAAVA,UADe;AAEfL,EAAAA,WAAW,EAAXA,WAFe;AAGfE,EAAAA,OAAO,EAAPA,OAHe;AAIfK,EAAAA,UAAU,EAAVA,UAJe;AAKfE,EAAAA,UAAU,EAAVA,UALe;AAMfjB,EAAAA,aAAa,EAAbA,aANe;AAOfmB,EAAAA,YAAY,EAAZA,YAPe;AAQfwB,EAAAA,cAAc,EAAdA,cARe;AASfkB,EAAAA,cAAc,EAAdA,cATe;AAUfc,EAAAA,YAAY,EAAZA;AAVe,CAAjB","sourcesContent":["const Tour = require(\"../model/tourSchema\");\r\nconst AppError = require(\"../utils/appError\");\r\nconst catchAsync = require(\"../utils/catchAsync\");\r\nconst factory = require(\"./handlerFactory\");\r\n\r\nconst aliesTopTours = async (req, res, next) => {\r\n  req.query.limit = \"6\";\r\n  req.query.sort = \"ratingsAverage,price\";\r\n  req.query.fields = \"name,price,ratingsAverage,summary,difficulty\";\r\n  next();\r\n};\r\n\r\nconst getAllTours = factory.getAll(Tour);\r\nconst getTour = factory.getOne(Tour, { path: \"review\" });\r\nconst createTour = factory.createOne(Tour);\r\nconst updateTour = factory.updateOne(Tour);\r\nconst deleteTour = factory.deleteOne(Tour);\r\n\r\nconst getTourState = catchAsync(async (req, res, next) => {\r\n  const stats = await Tour.aggregate([\r\n    {\r\n      $match: { ratingsAverage: { $gte: 4.5 } },\r\n    },\r\n    {\r\n      $group: {\r\n        _id: { $toUpper: \"$difficulty\" },\r\n        numTours: { $sum: 1 },\r\n        numRatings: { $sum: \"$ratingsQuantity\" },\r\n        avgRating: { $avg: \"$ratingsAverage\" },\r\n        avgPrice: { $avg: \"$price\" },\r\n        minPrice: { $min: \"$price\" },\r\n        maxPrice: { $max: \"$price\" },\r\n      },\r\n    },\r\n    {\r\n      $sort: { avgPrice: 1 },\r\n    },\r\n    {\r\n      $match: { _id: { $ne: \"EASY\" } }, // Use string representation of _id field\r\n    },\r\n  ]);\r\n  res.status(200).json({\r\n    status: \"success\",\r\n    data: {\r\n      stats,\r\n    },\r\n  });\r\n});\r\n\r\nconst getMonthlyPlan = catchAsync(async (req, res, next) => {\r\n  const year = req.params.year * 1;\r\n\r\n  const plan = await Tour.aggregate([\r\n    { $unwind: \"$startDates\" },\r\n    {\r\n      $match: {\r\n        startDates: {\r\n          $gte: new Date(`${year}-01-01`),\r\n          $lte: new Date(`${year}-12-31`),\r\n        },\r\n      },\r\n    },\r\n    {\r\n      $group: {\r\n        _id: {\r\n          $month: \"$startDates\",\r\n        },\r\n        numTourStarts: { $sum: 1 },\r\n        tour: { $push: \"$name\" },\r\n      },\r\n    },\r\n    {\r\n      $addFields: { month: \"$_id\" },\r\n    },\r\n    {\r\n      $project: {\r\n        _id: 0,\r\n      },\r\n    },\r\n    {\r\n      $sort: { numTourStarts: -1 },\r\n    },\r\n    {\r\n      $limit: 12,\r\n    },\r\n  ]);\r\n\r\n  res.status(200).json({\r\n    status: \"success\",\r\n    index: plan.length,\r\n    data: {\r\n      plan,\r\n    },\r\n  });\r\n});\r\n\r\nconst getToursWithin = catchAsync(async (req, res, next) => {\r\n  const { distance, latlng, unit } = req.params;\r\n  const [lat, lng] = latlng.split(\",\");\r\n\r\n  const radius = unit === \"mi\" ? distance / 3963.2 : distance / 6378.1;\r\n\r\n  if (!lat || !lng) {\r\n    return next(\r\n      new AppError(\r\n        \"Please provide latitude and longitude in the format lat, lng.\",\r\n        400,\r\n      ),\r\n    ); // Added return statement to stop execution\r\n  }\r\n\r\n  const tours = await Tour.find({\r\n    startLocation: { $geoWithin: { $centerSphere: [[lng, lat], radius] } }, // Make sure to reverse lat and lng\r\n  });\r\n\r\n  res.status(200).json({\r\n    status: \"success\",\r\n    results: tours.length,\r\n    data: {\r\n      data: tours,\r\n    },\r\n  });\r\n});\r\n\r\nconst getDistances = catchAsync(async (req, res, next) => {\r\n  const { latlng, unit } = req.params;\r\n  const [lat, lng] = latlng.split(\",\");\r\n\r\n  const multiplier = unit === \"mi\" ? 0.000621371 : 0.001;\r\n\r\n  if (!lat || !lng) {\r\n    next(\r\n      new AppError(\r\n        \"Please provide latitutr and longitude in the format lat,lng.\",\r\n        400,\r\n      ),\r\n    );\r\n  }\r\n\r\n  const distances = await Tour.aggregate([\r\n    {\r\n      $geoNear: {\r\n        near: {\r\n          type: \"Point\",\r\n          coordinates: [lng * 1, lat * 1],\r\n        },\r\n        distanceField: \"distance\",\r\n        distanceMultiplier: multiplier,\r\n      },\r\n    },\r\n    {\r\n      $project: {\r\n        distance: 1,\r\n        name: 1,\r\n      },\r\n    },\r\n  ]);\r\n\r\n  res.status(200).json({\r\n    status: \"success\",\r\n    data: {\r\n      data: distances,\r\n    },\r\n  });\r\n});\r\n\r\nmodule.exports = {\r\n  createTour,\r\n  getAllTours,\r\n  getTour,\r\n  updateTour,\r\n  deleteTour,\r\n  aliesTopTours,\r\n  getTourState,\r\n  getMonthlyPlan,\r\n  getToursWithin,\r\n  getDistances,\r\n};\r\n"],"file":"tour.dev.js"}