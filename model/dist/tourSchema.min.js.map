{"version":3,"sources":["tourSchema.js"],"names":["mongoose","require","slugify","tourSchema","Schema","name","required","type","String","unique","slug","Number","duration","maxGroupSize","difficulty","message","ratingsAverage","max","min","val","Math","round","set","default","ratingsQuantity","price","validator","this","summary","trim","imageCover","description","Date","now","images","secretTour","select","Boolean","startLocation","enum","address","coordinates","locations","day","ObjectId","ref","toJSON","virtuals","index","get","virtual","pre","next","$ne","find","start","post","docs","log","populate","path","Tour","model","module","exports"],"mappings":"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","file":"tourSchema.min.js","sourcesContent":["const mongoose = require(\"mongoose\");\r\nconst slugify = require(\"slugify\");\r\n// const validator = require(\"validator\");\r\n// const User = require(\"./userSchema\");\r\n\r\nconst tourSchema = new mongoose.Schema(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: [true, \"A tour must have a name\"],\r\n      unique: true,\r\n      maxLength: [40, \"A Tour name must have less or equal then 40 characters\"],\r\n      minLength: [10, \"A Tour name must have more or equal then 10 characters\"],\r\n      // validate: [validator.isAlpha, \"Tour name must only contain character\"],\r\n    },\r\n    slug: {\r\n      type: String,\r\n    },\r\n    duration: {\r\n      type: Number,\r\n      required: [true, \"A tour must have a duration\"],\r\n    },\r\n    maxGroupSize: {\r\n      type: Number,\r\n      required: [true, \"A tour must have a group size\"],\r\n    },\r\n    difficulty: {\r\n      type: String,\r\n      required: [true, \"A tour must have a difficult\"],\r\n      enum: {\r\n        values: [\"easy\", \"medium\", \"difficult\"],\r\n        message: \"Difficulty should be: easy, medium or difficult\",\r\n      },\r\n    },\r\n    ratingsAverage: {\r\n      type: Number,\r\n      default: 4.5,\r\n      min: [1, \"Rating must be above 1.0\"],\r\n      max: [5, \"Rating must be below 5.0\"],\r\n      set: (val) => Math.round(val * 10) / 10,\r\n    },\r\n    ratingsQuantity: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    price: {\r\n      type: Number,\r\n      required: [true, \"A tour must have a price\"],\r\n    },\r\n    priceDiscound: {\r\n      type: Number,\r\n      validate: {\r\n        validator: function (val) {\r\n          //This only point to current doc on NEW document creation\r\n          return val < this.price;\r\n        },\r\n        message: \"Discounted price can't be greater than the regular price\",\r\n      },\r\n    },\r\n    summary: {\r\n      type: String,\r\n      trim: true,\r\n      // required: [true, \"A tour must have a summary\"],\r\n    },\r\n    description: {\r\n      type: String,\r\n    },\r\n    imageCover: {\r\n      type: String,\r\n      // required: [true, \"A tour must have a cover image\"],\r\n    },\r\n    images: [String],\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now,\r\n      select: false,\r\n    },\r\n    startDates: [Date],\r\n    secretTour: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    startLocation: {\r\n      // GeoJSON\r\n      type: {\r\n        type: String,\r\n        default: \"Point\",\r\n        enum: [\"Point\"],\r\n      },\r\n      coordinates: [Number],\r\n      address: String,\r\n      description: String,\r\n    },\r\n    locations: [\r\n      {\r\n        type: {\r\n          type: String,\r\n          default: \"Point\",\r\n          enum: [\"Point\"],\r\n        },\r\n        coordinates: [Number],\r\n        address: String,\r\n        description: String,\r\n        day: Number,\r\n      },\r\n    ],\r\n    guides: [\r\n      {\r\n        type: mongoose.Schema.ObjectId,\r\n        ref: \"User\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    toJSON: {\r\n      virtuals: true,\r\n    },\r\n    toObject: {\r\n      virtuals: true,\r\n    },\r\n  },\r\n);\r\n\r\n// tourSchema.index({ price: 1 });\r\ntourSchema.index({ price: 1, ratingsAverage: -1 });\r\ntourSchema.index({ slug: 1 });\r\ntourSchema.index({ startLocation: \"2dsphere\" });\r\n\r\ntourSchema.virtual(\"durationWeeks\").get(function () {\r\n  return this.duration / 7;\r\n});\r\n\r\n// Virtual Populate\r\ntourSchema.virtual(\"review\", {\r\n  ref: \"Review\",\r\n  foreignField: \"tour\",\r\n  localField: \"_id\",\r\n});\r\n\r\n// DOCUMENT MIDDLEWARE: runs before .save() .create()\r\ntourSchema.pre(\"save\", function (next) {\r\n  this.slug = slugify(this.name, { lower: true });\r\n  next();\r\n});\r\n\r\n// tourSchema.pre(\"save\", async function (next) {\r\n//   const guidesPromises = this.guides.map(async (id) => await User.findById(id));\r\n//   this.guides = await Promise.all(guidesPromises);\r\n//   next();\r\n// });\r\n\r\n// QUERY MIDDLEWARE:\r\ntourSchema.pre(\"find\", function (next) {\r\n  this.find({ secretTour: { $ne: true } });\r\n  next();\r\n});\r\n// tourSchema.pre(\"find\", function (next) {\r\ntourSchema.pre(/^find/, function (next) {\r\n  this.find({ secretTour: { $ne: true } });\r\n  this.start = Date.now();\r\n  next();\r\n});\r\n\r\ntourSchema.post(/^find/, function (docs, next) {\r\n  console.log(`Query took ${Date.now() - this.start} milliseconds!`);\r\n  console.log(docs);\r\n  next();\r\n});\r\n\r\ntourSchema.pre(/^find/, function (next) {\r\n  this.populate({ path: \"guides\", select: \"-__v -passwordChangedAt\" });\r\n  next();\r\n});\r\n\r\n// // AGGREGATION MIDDLEWARE\r\n// tourSchema.pre(\"aggregate\", function (next) {\r\n//   this.pipeline().unshift({ $match: { $secretTour: { $ne: true } } });\r\n\r\n//   console.log(this.pipeline);\r\n//   next()\r\n// });\r\n\r\nconst Tour = mongoose.model(\"Tour\", tourSchema);\r\nmodule.exports = Tour;\r\n"]}