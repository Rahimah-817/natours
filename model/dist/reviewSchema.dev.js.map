{"version":3,"sources":["reviewSchema.js"],"names":["mongoose","require","Tour","reviewSchema","Schema","review","type","String","required","rating","Number","min","max","createdAt","Date","now","user","ObjectId","ref","tour","toJSON","virtuals","toObject","index","unique","pre","next","populate","path","select","statics","calcAverageRatings","tourId","aggregate","$match","$group","_id","nRating","$sum","avgRating","$avg","stats","length","findByIdAndUpdate","ratingsQuantity","ratingsAverage","post","constructor","doc","model","Review","module","exports"],"mappings":"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","sourcesContent":["// review / rating / createAt / ref to tour / ref to user\r\nconst mongoose = require(\"mongoose\");\r\nconst Tour = require(\"./tourSchema\");\r\n\r\nconst reviewSchema = mongoose.Schema(\r\n  {\r\n    review: {\r\n      type: String,\r\n      required: [true, \"Review can not be empty!\"],\r\n    },\r\n    rating: {\r\n      type: Number,\r\n      min: 1,\r\n      max: 5,\r\n    },\r\n    createdAt: {\r\n      type: Date,\r\n      default: Date.now,\r\n    },\r\n    user: {\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: \"User\",\r\n      required: [true, \"Review must belong to a User.\"],\r\n    },\r\n    tour: {\r\n      type: mongoose.Schema.ObjectId,\r\n      ref: \"Tour\",\r\n      required: [true, \"Review must belong to a tour.\"],\r\n    },\r\n  },\r\n  {\r\n    toJSON: { virtuals: true },\r\n    toObject: { virtuals: true },\r\n  },\r\n);\r\n\r\nreviewSchema.index({ tour: 1, user: 1 }, { unique: true });\r\n\r\nreviewSchema.pre(/^find/, function (next) {\r\n  // this.populate({\r\n  //   path: \"tour\",\r\n  //   select: \"name\",\r\n  // }).populate({\r\n  //   path: \"user\",\r\n  //   select: \"name photo\",\r\n  // });\r\n  this.populate({\r\n    path: \"user\",\r\n    select: \"name photo\",\r\n  });\r\n\r\n  next();\r\n});\r\nreviewSchema.statics.calcAverageRatings = async function (tourId) {\r\n  const stats = await this.aggregate([\r\n    {\r\n      $match: { tour: tourId },\r\n    },\r\n    {\r\n      $group: {\r\n        _id: \"$tour\",\r\n        nRating: { $sum: 1 },\r\n        avgRating: { $avg: \"$rating\" },\r\n      },\r\n    },\r\n  ]);\r\n\r\n  if (stats.length > 0) {\r\n    await Tour.findByIdAndUpdate(tourId, {\r\n      ratingsQuantity: stats[0].nRating,\r\n      ratingsAverage: stats[0].nRating,\r\n    });\r\n  } else {\r\n    await Tour.findByIdAndUpdate(tourId, {\r\n      ratingsQuantity: 0,\r\n      ratingsAverage: 4.5,\r\n    });\r\n  }\r\n};\r\n\r\nreviewSchema.post(\"save\", async function () {\r\n  // This points to current review\r\n  await this.constructor.calcAverageRatings(this.tour);\r\n});\r\n\r\nreviewSchema.pre(/^findOneAnd/, async function (next) {\r\n  next();\r\n});\r\n\r\nreviewSchema.post(/^findOneAnd/, async function (doc) {\r\n  await this.model.calcAverageRatings(doc.tour);\r\n});\r\n\r\nconst Review = mongoose.model(\"Review\", reviewSchema);\r\n\r\nmodule.exports = Review;\r\n"],"file":"reviewSchema.dev.js"}