{"version":3,"sources":["server.js"],"names":["express","require","morgan","config","helmet","connectDB","xss","path","AppError","process","mongoSanitize","err","console","log","exit","app","set","globalErrorHandler","join","__dirname","env","NODE_ENV","use","rateLimit","max","windowMs","limiter","json","limit","whitelist","viewRouter","users","tours","all","req","next","reviews","port","PORT","server","originalUrl","on","listen","concat","close"],"mappings":"aACA,IAAMA,QAAUC,QAAQ,WADxBC,OAAAD,QAAA,UACMD,UAAUC,QAAQ,eAGxBA,QAAQ,UAAUE,SAFlB,IAAMD,UAASD,QAAQ,sBAIjBG,OAASH,QAAQ,UAHjBI,cAAYJ,QAAQ,0BAKpBK,IAAML,QAAQ,aAJpBA,IAAQA,QAAUE,OAMZI,KAAON,QAAQ,QAEfO,SAAWP,QAAQ,oBANnBG,mBAAiBH,QAAvB,gCACAQ,QAAMC,GAAAA,oBAAwB,SAAAC,GAS5BC,QAAQC,IAAIF,GARdC,QAAYX,IAAAA,4CAUVQ,QAAQK,KAAK,KARf,IAAMP,IAAON,UAcbc,IAAIC,IAAI,cAAe,OAXvBD,IAAME,IAAAA,QAAAA,KAAkBC,KAAGjB,UAAQ,UAGjCW,YAKFG,IAAMA,IAAGX,UAIkBe,gBAAvBH,QAAII,IAARC,UAWEN,IAAIO,IAAIpB,OAAO,QAJjBa,IAAIO,QAAJC,UAEA,CAOEC,IAAK,IANPC,SAAYL,KACVL,QAAQb,kEASVa,IAAIO,IAAI,OAAQI,SAJdF,IAAAA,IAAKxB,QADmB2B,KAAA,CAAAC,MAAA,UAAAb,IAA1BO,IAAAZ,iBAQAK,IAAIO,IAAItB,OASRe,IAAIO,IANJP,IAAIO,CAQAO,UAAW,CALXP,WAOE,kBAJFA,iBAEAO,aAWJ,eALM,YAMNd,IAAIO,IAAItB,QAAO,OAAQO,KAAKW,KAAKC,UAAW,YAM5C,IAAMW,MAAU7B,QAAGA,gBAFb8B,MAAQ9B,QAAQ,gBAIlBqB,QAASQ,QAAb,kBACIR,WAAIrB,QAAiB+B,sBAEzBjB,IAAIO,IAAI,IAAAQ,YAERf,IAAIkB,IAAI,gBAAMC,OACZC,IAAAA,IAAK,gBAAAJ,OACNhB,IAFDO,IAAA,kBAAAc,SAMArB,IAAMsB,IAAI,IAAG5B,SAAAA,EAAQW,EAAIkB,GAEzBH,EAAMI,IAAM/B,SAAN+B,cAAAA,OAA0BL,EAAAM,YAA1BD,wBAIN9B,IAAAA,IAAQgC,oBAEN7B,IAAAA,KAAAH,QAAYW,IAAAkB,MAAA,IAEV7B,OAAQK,IAAR4B,OAAAL,KAAA,WACDzB,QAFDC,IAEC,uBAAA8B,OAFDN,KAEC,UALH5B,QAAQgC,GAAG,qBAAsB,SAAC9B,GAChCC,QAAQC,IAAIF,GACZC,QAAQC,IAAI,2CACZ0B,OAAOK,MAAM,WACXnC,QAAQK,KAAK","file":"server.min.js","sourcesContent":["// const fs = require(\"fs\");\r\nconst express = require(\"express\");\r\nconst morgan = require(\"morgan\");\r\nconst connectDB = require(\"./config/db\");\r\nrequire(\"dotenv\").config();\r\nconst rateLimit = require(\"express-rate-limit\");\r\nconst helmet = require(\"helmet\");\r\nconst mongoSanitize = require(\"express-mongo-sanitize\");\r\nconst xss = require(\"xss-clean\");\r\nconst hpp = require(\"hpp\");\r\nconst path = require(\"path\");\r\n\r\nconst AppError = require(\"./utils/appError\");\r\nconst globalErrorHandler = require(\"./controller/errorController\");\r\n\r\nprocess.on(\"uncaughtException\", (err) => {\r\n  console.log(err);\r\n  console.log(\"UNHANDLER REJECTION! ðŸ’¥ Shutting down...\");\r\n  process.exit(1);\r\n});\r\n\r\nconst app = express();\r\n\r\n// PUG\r\napp.set(\"view engine\", \"pug\");\r\napp.set(\"views\", path.join(__dirname, \"views\"));\r\n\r\n// Database connection\r\nconnectDB();\r\n\r\n//1) GLOBAL MIDDLEWARES\r\n// Set security HTTP headers\r\napp.use(helmet());\r\n\r\n// Development loggin\r\nif (process.env.NODE_ENV === \"development\") {\r\n  app.use(morgan(\"dev\"));\r\n}\r\n\r\n// Limit requests from same API\r\nconst limiter = rateLimit({\r\n  max: 100,\r\n  windowMs: 60 * 60 * 1000,\r\n  message: \"Too many requests from this IP, please try again in an hour! \",\r\n});\r\napp.use(\"/api\", limiter);\r\n\r\n// Body parser, reading data from the body into req.body\r\napp.use(express.json({ limit: \"10kb\" }));\r\n\r\n// Data sanitization against NoSQL query injection\r\napp.use(mongoSanitize());\r\n\r\n// Data sanitization against XSS\r\napp.use(xss());\r\n\r\n// Prevent parameter pollution\r\napp.use(\r\n  hpp({\r\n    whitelist: [\r\n      \"duration\",\r\n      \"ratingsQuantity\",\r\n      \"ratingsAverage\",\r\n      \"difficulty\",\r\n      \"maxGroupSize\",\r\n      \"price\",\r\n    ],\r\n  }),\r\n);\r\n\r\n// Serving static files\r\napp.use(express.static(path.join(__dirname, \"public\")));\r\n\r\n// ROUTES\r\nconst tours = require(\"./route/tour\");\r\nconst users = require(\"./route/user\");\r\nconst reviews = require(\"./route/review\");\r\nconst viewRouter = require(\"./route/viewRoutes\");\r\n\r\napp.use(\"/\", viewRouter);\r\napp.use(\"/api/v1/tours\", tours);\r\napp.use(\"/api/v1/users\", users);\r\napp.use(\"/api/v1/reviews\", reviews);\r\n\r\napp.all(\"*\", (req, res, next) => {\r\n  next(new AppError(`Can't find ${req.originalUrl} on this server!`));\r\n});\r\n\r\napp.use(globalErrorHandler);\r\n\r\nconst port = process.env.PORT || 5000;\r\n\r\nconst server = app.listen(port, () => {\r\n  console.log(`App running on port:${port}...`);\r\n});\r\n\r\nprocess.on(\"unhandledRejection\", (err) => {\r\n  console.log(err);\r\n  console.log(\"UNCAUGHT EXCEPTION! ðŸ’¥ Shutting down...\");\r\n  server.close(() => {\r\n    process.exit(1);\r\n  });\r\n});\r\n"]}